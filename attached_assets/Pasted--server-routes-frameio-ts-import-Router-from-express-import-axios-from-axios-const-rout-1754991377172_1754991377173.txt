// server/routes/frameio.ts
import { Router } from "express";
import axios from "axios";

const router = Router();

// You already have this; stubbed here for clarity
async function getAccessToken(): Promise<string> {
  // return your valid IMS access token (auto-refreshed using your centralized token system)
  throw new Error("implement me");
}

const FRAME_ACCOUNT_ID = process.env.FRAME_ACCOUNT_ID!;

/**
 * GET /api/files/:fileId/stream?prefer=proxy|original
 * Returns a short-lived, directly playable URL (HLS if available, else MP4).
 */
router.get("/api/files/:fileId/stream", async (req, res) => {
  try {
    const { fileId } = req.params;
    const prefer = (req.query.prefer as string) || "proxy"; // proxy = streaming variant

    const accessToken = await getAccessToken();

    // Ask Frame for media links on this file
    const r = await axios.get(
      `https://api.frame.io/v4/accounts/${FRAME_ACCOUNT_ID}/files/${fileId}`,
      {
        headers: { Authorization: `Bearer ${accessToken}` },
        // Include both types of links; if "original" is restricted, proxy should still work
        params: { include: "media_links.proxy,media_links.original" },
      }
    );

    // V4 responses are usually shaped as { data: {...} }
    const data = (r.data?.data ?? r.data) as any;

    const proxyLinks = data?.media_links?.proxy ?? [];
    const originalLinks = data?.media_links?.original ?? [];

    // Small helper: pick HLS first, then MP4, then anything
    const pick = (links: any[] = []) => {
      const byType = (t: string) =>
        links.find((l) => l?.type?.toLowerCase?.() === t);
      const byExt = (re: RegExp) => links.find((l) => re.test(String(l?.href)));

      return (
        byType("hls") ||
        byExt(/\.m3u8(\?|$)/i) ||
        byType("mp4") ||
        byExt(/\.mp4(\?|$)/i) ||
        links[0]
      );
    };

    let link: any | undefined;
    if (prefer === "original") link = pick(originalLinks);
    if (!link) link = pick(proxyLinks);

    if (!link?.href) {
      return res
        .status(404)
        .json({ error: "No playable media links available for this file." });
    }

    const kind =
      link.type?.toLowerCase() ||
      (String(link.href).endsWith(".m3u8") ? "hls" : "mp4");

    // Donâ€™t let clients cache ephemeral URLs
    res.set("Cache-Control", "no-store");
    res.json({
      url: link.href,
      kind, // 'hls' | 'mp4' | (possibly 'dash' in some orgs)
      expiresAt: link.expires_at ?? null,
    });
  } catch (err: any) {
    const status = err?.response?.status ?? 500;
    return res.status(status).json({
      error: "Failed to fetch media links",
      details: err?.response?.data ?? err?.message,
    });
  }
});

export default router;