// assumes you have a getAccessToken(), FRAME_BASE = https://api.frame.io, and fetch wrapper

export async function createClientDeliveryShare(req, res) {
  const { accountId, projectId, itemRefs } = req.body;
  // itemRefs: Array<{ id: string; type: 'file'|'folder' }>

  const token = await ensureValidAccessToken();

  // 1) Create share
  const shareResp = await fetch(
    `${FRAME_BASE}/v4/accounts/${accountId}/projects/${projectId}/shares`,
    {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
        'api-version': '4.0',
      },
      body: JSON.stringify({ data: { name: 'Client Delivery' } })
    }
  );
  const shareData = await shareResp.json();
  if (!shareResp.ok) return res.status(shareResp.status).json(shareData);
  const shareId = shareData?.data?.id;

  // 2) Add assets
  if (itemRefs?.length) {
    const addAssetsResp = await fetch(
      `${FRAME_BASE}/v4/accounts/${accountId}/shares/${shareId}/assets`,
      {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
          'api-version': '4.0',
        },
        body: JSON.stringify({ data: itemRefs })
      }
    );
    const addAssetsData = await addAssetsResp.json();
    if (!addAssetsResp.ok) return res.status(addAssetsResp.status).json(addAssetsData);
  }

  // 3) Patch settings (30 days from now)
  const expiresAt = new Date(Date.now() + 30 * 24 * 3600 * 1000).toISOString();

  const patchBody = {
    data: {
      // Use the exact keys your GET /shares/{id} shows
      visibility: 'public',
      downloads_enabled: true,
      comments_enabled: false,
      expires_at: expiresAt,
    }
  };

  const patchResp = await fetch(
    `${FRAME_BASE}/v4/accounts/${accountId}/shares/${shareId}`,
    {
      method: 'PATCH',
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
        'api-version': '4.0',
      },
      body: JSON.stringify(patchBody)
    }
  );
  const patched = await patchResp.json();
  if (!patchResp.ok) return res.status(patchResp.status).json(patched);

  // 4) Fetch final & return the public URL
  const showResp = await fetch(
    `${FRAME_BASE}/v4/accounts/${accountId}/shares/${shareId}`,
    {
      headers: {
        Authorization: `Bearer ${token}`,
        'api-version': '4.0',
      }
    }
  );
  const finalShare = await showResp.json();
  // The URL field name is shown in this payload. Often surfaced as a “display” link.
  // Return the whole share payload so your UI can pick the right field.
  return res.status(201).json(finalShare);
}